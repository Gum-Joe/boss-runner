#!/usr/bin/env ruby

require_relative "../lib/logger"
require_relative "../lib/help"
require_relative "../lib/error"
require_relative "../lib/set"
# TODO: Uncomment lin below for production
# home = ENV["HOME"] || ENV["HOMEPATH"]
home = ENV["PWD"]
settings = Runner::Set.new("env")
if ARGV.include?("--verbose")
  print("===> Setting worker settings...\n")
end
worker = settings.setprop("worker")
app = settings.setprop("app_name")
appd = settings.setprop("app_dir")

# Version number
# Also, set args to the ARGV array
# For easier reference
version = "0.1.0"
args = ARGV.dup

# Fast track to showing version number and help
if args.include?('-v')
  print version
  exit 0
end
# Fast-track to help
if args.include?('--help') || args.include?('-h')
  help()
  exit 0
end
print "Boss runner\nVersion #{version}\n"
# What to do if command is start
if args[0] == 'start'
  # Checks
  # Check for verbose flag
  if args.include?('--verbose')
    print("\r===> #{worker}: Checking for a .boss.yml file...")
  end
  if File.file?("#{appd}/.boss.yml") == false
    print("\r===> #{worker}: Checking for a .boss.yml file... error!\n")
    err = Error.new("ENOENT", "Could not find a .boss.yml in the directory '#{appd}'!", "Please check the file exists!")
    stackss = []
    stackss.push("#{ENV["PWD"]}/bin/bossrun:50")
    stackss.push("#{ENV["PWD"]}/lib/error.rb")
    stackss.push("env")
    stackss.push("#{@home}/boss")
    err.throw(nil)
  else
    if args.include?('--verbose')
      print("\r===> #{worker}: Checking for a .boss.yml file... true\n")
    end
  end
  # Start web-app
  log("Starting web-app '#{app}'")
  log("Worker name:      '#{worker}'")
  log("Web-app name:     '#{app}'")
  log("Web-app location: '#{appd}'")
  Runner::start()
  # Has the web-app already been built?
  # Check file appd/.boss/build_log.txt
end
# Args checking
