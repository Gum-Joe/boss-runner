#!/usr/bin/env ruby

require 'rubygems'
require 'json'
require "yaml"
require_relative "../lib/logger"
require_relative "../lib/help"
require_relative "../lib/error"
require_relative "../lib/set"
require_relative "../lib/build"
require_relative "../lib/starter"
require_relative "../lib/version"

# Version number
# Also, set args to the ARGV array
# For easier reference
version = get_version()
args = ARGV.dup

print "Jakhu runner\nVersion #{version}\n"

# TODO: Uncomment lin below for production
# home = ENV["HOME"] || ENV["HOMEPATH"]
home = ENV["PWD"]

settings = Runner::Set.new("env")
if ARGV.include?("--verbose")
  print("===> Setting worker settings...\n")
end
worker = settings.setprop("worker")
app = settings.setprop("app_name")
appd = settings.setprop("app_dir")
config = YAML.load_file("#{appd}/.jakhu.yml")
tub = YAML.load_file("#{home}/jakhu/tub_config.yml")

# Fast track to showing version number and help
if args.include?('-v')
  print version
  exit 0
end
# Fast-track to help
if args.include?('--help') || args.include?('-h')
  help()
  exit 0
end
# What to do if command is start
if args[0] == 'start'
  # state
  log("Starting web-app: '#{app}'")
  loge("Tub name:      '#{worker}'")
  loge("Web-app name:     '#{app}'")
  loge("Web-app location: '#{appd}'")
  loge("Language:         '#{config["language"]}'")
  # Checks
  # Check for verbose flag
  if args.include?('--verbose')
    print("\r===> #{worker}: Checking for a .jakhu.yml file...")
  end
  if File.file?("#{appd}/.jakhu.yml") == false
    print("\r===> #{worker}: Checking for a .jakhu.yml file... error!\n")
    err = Error.new("ENOENT", "Could not find a .jakhu.yml in the directory '#{appd}'!", "Please check the file exists!")
    stackss = []
    err.stackg(caller[0])
    err.stackg("#{ENV["PWD"]}/lib/error.rb")
    err.stackg("env")
    err.stackg("#{@home}/.jakhu")
    err.throw()
  else
    if args.include?('--verbose')
      print("\r===> #{worker}: Checking for a .jakhu.yml file... true\n")
    end
  end
  # Check build state
  if File.file?("#{appd}/.jakhu/build.json")
    # Check state
    print("\r===> #{worker}: Checking the state of the last build...\n")
    buildjson = File.read("#{appd}/.jakhu/build.json")
    begin
      build = JSON.parse(buildjson)
    rescue JSON::ParserError => e
      jsonerr = Error.new("JSON::ParserError", e.message, "Please check the file #{appd}/.jakhu/build.json.\n")
      jsonerr.set("gem")
      jsonerr.stackg(caller[0])
      era = eval(e.backtrace.inspect)
      xy = 1
      while xy < era.length
        jsonerr.stackg(era[xy])
        xy +=1
      end
      jsonerr.throw()
    end
    bui = "latest"
    logadvice = "Please check your build logs and change your commands if required. You can get logs by running 'jakhurun fetch log #{bui} --build'"
    # Check state
    if build["builds"]["#{bui}"]["state"] != "success"
      builderr = Error.new("EBUILD_STATE", "The last build was not a success!", logadvice)
      stackbuild = File.readlines("#{appd}/.jakhu/build.json")
      lines = []
      $i = 0
      while $i < stackbuild.length
        if stackbuild[$i].include? "state"
          lines.push($i)
        end
        $i +=1
      end
      builderr.stack("#{appd}/.jakhu/build.json", lines[0])
      builderr.throw()
    elsif build["builds"]["#{bui}"]["state"] == "success"
      loge("The last build was successful!")
      log("Continuing to starting web-app...")
      start_app(args, worker, app, appd)
    end
  else
    log("Web-app has not been built yet!")
    log("Now building web-app #{app}...")
    build(args, worker, app, appd)
  end
  # Start web-app
  #build(args, worker, app, appd)
  # Has the web-app already been built?
  # Check file appd/.jakhu/build_log.txt
end
# Args checking
